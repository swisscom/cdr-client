spring:
  main:
    web-application-type: REACTIVE
  application:
    name: CDR Client
  output:
    ansi:
      enabled: detect
  profiles:
    include:
      - client
  task:
    scheduling:
      pool:
        size: 5
      shutdown:
        # Spring's default shutdown behavior is to wait for scheduled tasks to finish and once all tasks have finished, to shut down the task executor.
        # In the absence of exceptions, our scheduled tasks never finish as they are the source of a "hot" kotlin flow. To avoid the delay in the
        # application shutdown while Spring waits for the task executor to shut down (and a stacktrace in the logs at the end of the wait time), we
        # need to tell Spring to cancel the tasks themselves, and to do so immediately.
        # In our case, this means cancellation of the CoroutineScope we are running the tasks in; this should translate into a graceful shutdown of the client.
        await-termination-period: 0s
        await-termination: true
  jmx:
    enabled: false
  jackson:
    time-zone: UTC

server:
  address: localhost
  port: 8191
  shutdown: graceful
  netty:
    connection-timeout: 1s
    idle-timeout: 30s
    validate-headers: true

management:
  server:
    address: localhost
    port: 8193
  endpoints:
    web:
      exposure:
        include: "info,health"
  health:
    defaults:
      enabled: false
    diskspace:
      enabled: true
  endpoint:
    health:
      show-details: always
      show-components: always

logging:
  pattern:
    correlation: "%correlationId" # would be added automatically if we were using Micrometer
    dateformat: "\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", UTC"
  level:
    root: INFO
  charset:
    console: UTF-8
    file: UTF-8
  logback:
    rollingpolicy:
      max-file-size: 100MB

otel:
  logs:
    exporter: [ none ]
  traces:
    exporter: [ none ]
  metrics:
    exporter: [ none ]
  instrumentation:
    common:
      logging:
        span-id: spanId
        trace-id: traceId