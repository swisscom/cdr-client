# https://conveyor.hydraulic.dev/18.1/configs/hocon/

// This is a hashbang include. You can run the command after the #! to see what
// configuration is being extracted from the Gradle build using the Conveyor plugin.
include "#!./gradlew -q printConveyorConfig"

// This enables native library extraction, which improves app startup time and robustness.
// It's optional but a good idea to have it. You can remove this if you get tired of specifying
// system properties for Java libraries with native components.
//
// See https://hydraulic.dev/blog/11-in-jar-signing.html for more.
include required("https://raw.githubusercontent.com/hydraulic-software/conveyor/master/configs/jvm/extract-native-libraries.conf")

# https://conveyor.hydraulic.dev/18.1/stdlib/jdks/
# It is not possible to override the JDK version in the config file; the `conveyor` command complains that both the toolchain and the config specfiy a JDK version.
//include required("/stdlib/jdk/17/eclipse.conf")

# Config file documentation: https://conveyor.hydraulic.dev/latest/configs
app {
  # https://conveyor.hydraulic.dev/18.1/configs/names/#names-and-metadata
  # Increment if the config file contents change but the application does not, reset to 0 if the app version changes
  revision = 0
  fsname = "cdr-client"
  fsname-ui = "cdr-client-ui"
  fsname-service = "cdr-client-service"
  rdns-name = "com.swisscom.health.des.cdr.cdr-client"
  display-name = "CDR Client"
  vendor = "Swisscom (Schweiz) AG"
  description = "Client application to connect to Swisscom's curaLINE Document Routing (CDR) service for participants in the Swiss healthcare system."
  license = "Apache-2.0"
  contact-email = "${env.CONTACT_EMAIL}"
  vcs-url = "https://github.com/swisscom/cdr-client"

  # https://conveyor.hydraulic.dev/18.1/configs/update-modes/
  updates = background # other options are `aggressive`, `none`, or `manual`
  # On linux the modes make no difference, updates are always only done via the system's package manager - is that a problem for us?

  # TODO: remove to build all installers, including MacOS and ARM derivatives
  machines = [windows.amd64, linux.amd64.glibc, mac.amd64, mac.aarch64]

  # https://conveyor.hydraulic.dev/18.1/configs/#signing
  # defaults in `~/.config/hydraulic/conveyor/defaults.conf`
  sign = true

  # Does not have to be an SVG. You can use whatever icons you like. They should be rendered as PNGs in a range of square sizes, ideally 32x32, 64x64, 128x128 etc up to 1024x1024.
  # https://conveyor.hydraulic.dev/18.1/tutorial/tortoise/2-gradle/#conveyorconf
  icons = resources/conveyor/icons/Swisscom_Lifeform_RGB_Colour.svg
  windows.inputs += TASK/rendered-icons/windows
  linux.inputs += TASK/rendered-icons/linux

  # update site - can be a directory, http/ftp site, s3, or a github site
  # to publish to `/var/conveyor/sites/cdr-client` run `conveyor make copied-site` (will leave an empty `output` directory in the project root)
  site {
    # https://conveyor.hydraulic.dev/18.1/configs/download-pages/#synopsis
    icons = resources/conveyor/icons/Swisscom_Horizontal_RGB_Colour_Navy.svg
  }

  windows {
    inputs += cdr-client-service/conf/default-application-customer.yaml -> conf/default-application-customer.yaml
    inputs += cdr-client-service/conf/logback-service.xml -> conf/logback-service.xml
    inputs += cdr-client-ui/conf/logback-ui.xml -> conf/logback-ui.xml

    exe-installer-basename = "cdr-client-installer"
    # https://conveyor.hydraulic.dev/18.1/configs/keys-and-certificates/#azure-key-vault
    signing-key {
      azure-key-vault {
        vault-name = ${env.KEY_VAULT_NAME}
        api-access-token = ${env.AZURE_API_ACCESS_TOKEN}
      }
    }
    signing-key-alias = ${env.SIGNING_KEY_ALIAS}
    amd64 {
      # https://conveyor.hydraulic.dev/18.1/configs/inputs/#machine-specific-inputs
      # https://conveyor.hydraulic.dev/18.1/configs/jvm/#importing-app-files
      
      // CDR Client Watchdog Service files - include all published files
      inputs += cdr-client-watchdog/publish/ -> bin/watchdog/
      
      // Watchdog service management scripts
      inputs += cdr-client-watchdog/install-service.bat -> bin/install-watchdog.bat
      inputs += cdr-client-watchdog/uninstall-service.bat -> bin/uninstall-watchdog.bat
      inputs += cdr-client-watchdog/cleanup-on-uninstall.bat -> bin/cleanup-on-uninstall.bat
      inputs += cdr-client-watchdog/cleanup-service.ps1 -> bin/cleanup-service.ps1
      inputs += cdr-client-watchdog/troubleshoot.bat -> bin/troubleshoot-watchdog.bat
      inputs += cdr-client-watchdog/appsettings.json -> bin/watchdog/appsettings.json
    }
    manifests {
      // https://conveyor.hydraulic.dev/18.1/configs/windows/#requesting-administrator-access
      exe.requested-execution-level = requireAdministrator
      msix {
        namespaces = {
          uap10: "http://schemas.microsoft.com/appx/manifest/uap/windows10/10"
        }
        ignorable-namespaces += "uap10"
        capabilities = ["rescap:runFullTrust", "rescap:localSystemServices", "rescap:packagedServices", "rescap:allowElevation"]
        // https://learn.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-desktop6-extension
        extensions-xml = """
          <desktop6:Extension Category="windows.service" EntryPoint="Windows.FullTrustApplication" Executable="app\bin\watchdog\CdrClientWatchdog.exe" uap10:RuntimeBehavior="packagedClassicApp">
               <desktop6:Service Name="CDRClientWatchdog" StartAccount="localSystem" StartupType="auto" />
          </desktop6:Extension>
        """
        // https://conveyor.hydraulic.dev/18.1/configs/windows/#virtualization
        virtualization {
          # Exclude the entire RoamingAppData directory from virtualization.
          excluded-directories += RoamingAppData
        }
      }
    }
    // https://conveyor.hydraulic.dev/18.1/configs/windows/#appwindowsupdates
    updates {
      launch-check-frequency = 1 // hours
      block-start = false
      automatic-updates = true
    }
  }

  linux {
    # https://conveyor.hydraulic.dev/18.1/configs/linux/#applinuxconf-dir
    conf-dir = lib/app/conf
    # On Linux the contents of the conf directory get symlinked to /etc/<app.long-fsname-dir>, so the target name has to be the final name, i.e.
    # `application-customer.yaml`, not `default-application-customer.yaml`!
    inputs += cdr-client-service/conf/default-application-customer.yaml -> conf/application-customer.yaml
    inputs += cdr-client-service/conf/logback-service.xml -> conf/logback-service.xml
    inputs += cdr-client-ui/conf/logback-ui.xml -> conf/logback-ui.xml

    # https://conveyor.hydraulic.dev/18.1/configs/linux/#applinuxsigning-key
    signing-key {
      azure-key-vault {
        vault-name = ${env.KEY_VAULT_NAME}
        api-access-token = ${env.AZURE_API_ACCESS_TOKEN}
      }
    }
    signing-key-alias = ${env.SIGNING_KEY_ALIAS}

    symlinks = [
      ${app.linux.prefix}/bin/${app.fsname-ui} -> ${app.linux.install-path}/bin/${app.fsname-ui},
      ${app.linux.prefix}/bin/${app.fsname-service} -> ${app.linux.install-path}/bin/${app.fsname-service},
    ]

    # https://conveyor.hydraulic.dev/18.1/configs/linux/#applinuxservices
    services.server {
        include "/stdlib/linux/service.conf"
        # reduces security, but otherwise the application-customer.yaml file cannot be modified or we would need to run the service as root
        include "/stdlib/linux/writable-service-install.conf"
        Service {
            ExecStart = ${app.linux.install-path}/bin/${app.fsname-service}
            Restart = always
            User = ${app.long-fsname}
            Group = ${app.long-fsname}
        }
    }

    desktop-file {
      # https://conveyor.hydraulic.dev/18.1/configs/linux/#applinuxdesktop-file
      "Desktop Entry".Categories = "GTK;Gnome;"
      "Desktop Entry".Exec = ${app.linux.prefix}/bin/${app.fsname-ui}
    }
  }

  mac {
    inputs += cdr-client-service/conf/default-application-customer.yaml -> conf/default-application-customer.yaml
    inputs += cdr-client-service/conf/logback-service.xml -> conf/logback-service.xml
    inputs += cdr-client-ui/conf/logback-ui.xml -> conf/logback-ui.xml

    # https://conveyor.hydraulic.dev/18.1/configs/#signing
    # set to a pem or pkcs12 file containing the private key, path is relative to the app config file
#    signing-key = derived
    # replace the defaults below with certs, path is relative to the app config file
    # TODO: replace the defaults below with certs, path is relative to the app config file
 #   certificate = "self signed by CN=CDR Client"
  }

  # https://conveyor.hydraulic.dev/18.1/configs/jvm/#native-code
  jvm {
    system-properties {
      file.encoding = UTF-8
    }

    # https://conveyor.hydraulic.dev/18.1/configs/jvm/#appjvmoptions
    options += -Xmx512m

    windows.options += "-Dspring.config.additional-location=C:/ProgramData/"${app.vendor}"/"${app.fsname}"/application-customer.yaml"
    # logback config location for SpringBoot based client service
    windows.options += "-Dlogging.config=C:/ProgramData/"${app.vendor}"/"${app.fsname}"/logback-service.xml"
    # logback config location for plain vanilla Kotlin client ui
    windows.options += "-Dlogback.configurationFile=C:/ProgramData/"${app.vendor}"/"${app.fsname}"/logback-ui.xml"
    windows.options += "-Dcdr.client.log.directory=C:/ProgramData/"${app.vendor}"/"${app.fsname}
    windows.options += "-Dcdr.client.ui.isServiceController=false"
    linux.options += "-Dspring.config.additional-location=/etc/"${app.long-fsname-dir}"/application-customer.yaml"
    # logback config location for SpringBoot based client service
    linux.options += "-Dlogging.config=/etc/"${app.long-fsname-dir}"/logback-service.xml"
    # logback config location for plain vanilla Kotlin client ui
    linux.options += "-Dlogback.configurationFile=/etc/"${app.long-fsname-dir}"/logback-ui.xml"
    linux.options += "-Dcdr-client-config-location=/etc/"${app.long-fsname-dir}
    # FIXME: directory needs to be created by the installer
    linux.options += "-Dcdr.client.log.directory=/var/log/"${app.long-fsname-dir}
    linux.options += "-Dcdr.client.ui.isServiceController=false"
    mac.options += "-Dspring.config.additional-location=Library/Application Support/"${app.rdns-name}"/application-customer.yaml"
    # logback config location for SpringBoot based client service
    mac.options += "-Dlogging.config=Library/Application Support/"${app.rdns-name}"/logback-service.xml"
    # logback config location for plain vanilla Kotlin client ui
    mac.options += "-Dlogback.configurationFile=Library/Application Support/"${app.rdns-name}"/logback-ui.xml"
    mac.options += "-Dcdr.client.log.directory=Library/Logs/"${app.rdns-name}
    mac.options += "-Dcdr.client.ui.isServiceController=true"

    gui {
      main-class = com.swisscom.health.des.cdr.client.ui.UiMainKt
      exe-name = cdr-client-ui
    }

    cli {
      cdr-client-service {
        main-class = com.swisscom.health.des.cdr.client.CdrClientApplicationKt
      }
    }

    # https://conveyor.hydraulic.dev/18.1/configs/jvm/#native-code
    # TODO: comment in once everything works
    //    extract-native-library = true

    # https://conveyor.hydraulic.dev/18.1/configs/jvm/#localization
    # TODO: make this work; could be that only the MacOS ARM version does not support this?
    //    jlink-flags += "--add-modules jdk.localedata"
    //    jlink-flags += " --include-locales=en,de"
  }
}

conveyor.compatibility-level = 18
